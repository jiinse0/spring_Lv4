plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
/* Spring Security */
    implementation 'org.springframework.boot:spring-boot-starter-security'

    /* Jwt */
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    //Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    /* mysql */
    runtimeOnly 'com.mysql:mysql-connector-j'

    // QueryDSL 적용을 위한 의존성 (SpringBoot3.0 부터는 jakarta 사용해야함)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

/*-------Querydsl을 사용하여 자동으로 생성된 소스 코드를 프로젝트에 추가하는 역할--------*/

// Querydsl 설정부
// querydslSrcDir 변수는 Querydsl에서 생성된 소스 코드를 저장할 디렉토리 경로를 지정한다.
// Querydsl이 생성한 소스코드는 src/main/generated 디렉토리에 저장된다.
def querydslSrcDir = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
// main 소스셋에 querydslSrcDir를 추가하여 Querydsl에서 생성된 소스 코드가 빌드에 포함되도록 한다.
// Gradle은 main 소스셋에 있는 소스 코드와 함께 src/main/generated 디렉토리에 있는 Querydsl 소스 코드를 컴파일 한다.
sourceSets {
    main.java.srcDirs += [ querydslSrcDir ]
}

// java source set 에 querydsl QClass 위치 추가
// 모든 java 컴파일 작업에 대해 설정을 지정한다.
// JavaCompile 작업의 generatedSourceOutputDirectory 옵션을 querydslSrcDir로 설정하여 컴파일된 소스 코드가 src/main/generated 디렉토리에 저장되도록 한다.
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

// 빌드를 정리하는 데 사용한다.
// clean 작업이 실행될 때 querydslSrcDir에 해당하는 디렉토리를 삭제한다.
// 다음 빌드 시에 Querydsl이 새로운 소스 코드를 생성하더라도 이전에 생성된 파일들이 삭제되고 최신 소스 코드로 업데이트 된다.
clean {
    delete file(querydslSrcDir)
}

tasks.named('test') {
    useJUnitPlatform()
}
